/* posicionamento */

#caixona{   /* pode ser omitido pois sus posição é absoluta posição 0px da bordas da tela */
    position: static;
}

#caixinha1{
    position: fixed;
    top: 15px;
    left: 80px;
}

#caixinha2{
    position: fixed;
    top: 80px;
    left: 15px;
}

#caixinha3{
    position: fixed;
    top: 50px;
    left: 50px;
}


#caixinha4{
    position: relative;
    top: 50px;
    left: 50px;
}

#caixinha5{
    position: absolute;
    top: 0px;
    left: 0px;
}

/* visualização */

#caixona{
    border: 1px solid red;
    height: 100px;
    width: 100px;
}

#caixinha1{
    height: 20px;
    width: 20px;
    background-color:cyan ;
    border: 2px solid blue;
    text-align: center;
}

#caixinha2{
    height: 20px;
    width: 20px;
    background-color: pink;
    border: 2px solid magenta;
    text-align: center;
}

#caixinha3{
    height: 20px;
    width: 20px;
    background-color: lime;
    border: 2px solid green;
    text-align: center;
}

#caixinha4{
    height: 20px;
    width: 20px;
    background-color:darkorchid;
    border: 2px solid purple;
    text-align: center;
}

#caixinha5{
    height: 20px;
    width: 20px;
    background-color:rgb(138, 148, 3);
    border: 2px solid yellow;
    text-align: center;
}
/* 
Sintaxe
A propriedade (position:) é definida com apenas uma palavra-chave da lista abaixo.

(position: static;)
O elemento é posicionado de acordo com o fluxo normal do documento, é o valor padrão do atributo position, e impede qualquer alteração em relação ao posicionamento padrão definido pelo navegador.
OBS: Em outras palavras, para usar offset é obrigatório mudar o valor de position, ou nada acontecerá. 

(position: relative;)
O elemento é posicionado de acordo com o fluxo normal do documento e, em seguida, deslocado em relação a si mesmo com base nos valoresposta de (top, right, bottom e left). O deslocamento não afeta a posição de nenhum outro elemento; assim, o espaço dado para o elemento no layout da página é o mesmo que se position fosse "static". 
OBS: Podemos encarar o relative como uma maneira de fazer "ajustes" na posição. Sabemos onde o elemento estava, agora queremos adicionar um offset em cada direção, isto é, "empurrar" um pouco para alguma direção. O elemento pode sobrepor um outro elemento já posicionado.

(position: absolute;)
O elemento é removido do fluxo normal de documentos e nenhum espaço é criado para o elemento no layout da página. Ele é posicionado em relação ao seu ancestral posicionado mais próximo, se houver; caso contrário, ele é colocado em relação ao bloco contendo inicial . Sua posição final é determinada pelos valoresposta de (top, right, bottom, e left).

(position: fixed;)
O elemento é removido do fluxo normal de documentos e nenhum espaço é criado para o elemento no layout da página. Ele é posicionado em relação ao bloco contendo inicial estabelecido pela viewport , exceto quando um de seus ancestrais tiver uma propriedade transform, perspectiveou filterdefinida como algo diferente de none(consulte oEspecificação de transformações CSS), caso em que esse ancestral se comporta como o bloco que o contém. (Observe que há inconsistências do navegador perspectivee filtercontribuindo para conter a formação de blocos.) Sua posição final é determinada pelos valoresposta de top, right, bottome left.
Esse valor sempre cria um novo contexto de empilhamento . Nos documentos imprespostasos, o elemento é colocado na mesma posição em todas as páginas .

(position: sticky;)
O elemento é posicionado de acordo com o fluxo normal do documento e, em seguida, deslocado em relação ao seu ancestral de rolagem mais próximo e ao bloco que contém (ancestral de nível de bloco mais próximo), incluindo elementos relacionados à tabela, com base nos valoresposta de top, right, bottome left. O deslocamento não afeta a posição de nenhum outro elemento.
Esse valor sempre cria um novo contexto de empilhamento . Observe que um elemento fixo "gruda" em seu ancestral mais próximo que possui um "mecanismo de rolagem" (criado quando overflowé hidden, scroll, autoou overlay), mesmo que esse ancestral não seja o ancestral de rolagem mais próximo. Isso inibe efetivamente qualquer comportamento "pegajoso" (consulte oProblema do Github no W3C CSSWG). 
*/